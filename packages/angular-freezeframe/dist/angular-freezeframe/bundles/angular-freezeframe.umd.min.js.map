{"version":3,"sources":["../../../projects/angular-freezeframe/src/lib/angular-freezeframe.component.ts","../../../projects/angular-freezeframe/src/lib/angular-freezeframe.module.ts"],"names":["i0.ɵɵelementStart","i0.ɵɵelement","i0.ɵɵelementEnd","i0.ɵɵadvance","i0.ɵɵpropertyInterpolate","AngularFreezeframeComponent","this","isPlaying","startEvent","EventEmitter","stopEvent","toggleEvent","prototype","ngAfterViewInit","init","ngOnDestroy","destroy","target","slotIsEmpty","src","freezeRef","nativeElement","slotRef","$freezeframe","Freezeframe","options","initEventListeners","_this","on","items","emit","Object","defineProperty","_c","_b","_a","innerHTML","trim","start","stop","toggle","selectors","viewQuery","rf","ctx","i0.ɵɵprojection","i0.ɵɵtemplate","i0.ɵɵproperty","Component","selector","template","Input","Output","ViewChild","AngularFreezeframeModule","imports","declarations","exports","NgModule"],"mappings":"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","sourcesContent":["/* eslint-disable @angular-eslint/component-selector */\nimport { Component, ElementRef, Input, Output, ViewChild, EventEmitter, AfterViewInit, OnDestroy } from '@angular/core';\nimport Freezeframe from 'freezeframe'\nimport { FreezeframeOptions, Freeze } from 'freezeframe/types'\n\nexport interface AngularFreezeframeEvent {\n  items: Freeze[],\n  isPlaying: boolean\n}\n\n@Component({\n  selector: 'angular-freezeframe',\n  template: `\n    <div class=\"angular-freezeframe\">\n      <div #slotRef><ng-content></ng-content></div>\n      <div *ngIf=\"!slotRef.innerHTML.trim()\">\n        <img #freezeRef src=\"{{src}}\" />\n      </div>\n    </div>\n  `\n})\nexport class AngularFreezeframeComponent implements AfterViewInit, OnDestroy {\n  $freezeframe!: Freezeframe\n  isPlaying = false\n\n  @Input() src?: string\n  @Input() options?: FreezeframeOptions\n  @Output() startEvent = new EventEmitter<AngularFreezeframeEvent>();\n  @Output() stopEvent = new EventEmitter<AngularFreezeframeEvent>();\n  @Output() toggleEvent = new EventEmitter<AngularFreezeframeEvent>();\n\n  @ViewChild('freezeRef') freezeRef!: ElementRef;\n  @ViewChild('slotRef') slotRef!: ElementRef;\n\n  ngAfterViewInit(): void {\n    this.init()\n  }\n\n  ngOnDestroy(): void {\n    this.destroy()\n  }\n\n  private init(): void {\n    const target = this.slotIsEmpty && this.src\n      ? this.freezeRef.nativeElement\n      : this.slotRef.nativeElement\n    this.$freezeframe = new Freezeframe(target, this.options)\n    this.initEventListeners()\n  }\n\n  private initEventListeners(): void {\n    this.$freezeframe.on('toggle', (items: Freeze[], isPlaying: boolean) => {\n      this.isPlaying = isPlaying\n      if (isPlaying) {\n        this.startEvent.emit({ items, isPlaying })\n      } else {\n        this.stopEvent.emit({ items, isPlaying })\n      }\n      this.toggleEvent.emit({ items, isPlaying })\n    });\n  }\n\n  private get slotIsEmpty(): boolean {\n    return !this.slotRef?.nativeElement?.innerHTML?.trim()\n  }\n\n  start(): void {\n    this.$freezeframe?.start()\n  }\n\n  stop(): void {\n    this.$freezeframe?.stop()\n  }\n\n  toggle(): void {\n    this.$freezeframe?.toggle()\n  }\n\n  destroy(): void {\n    this.$freezeframe?.destroy()\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFreezeframeComponent } from './angular-freezeframe.component';\n\n@NgModule({\n  declarations: [AngularFreezeframeComponent],\n  imports: [\n  ],\n  exports: [AngularFreezeframeComponent]\n})\nexport class AngularFreezeframeModule { }\n"]}